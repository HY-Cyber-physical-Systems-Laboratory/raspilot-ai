#ifndef __MODULE_TEST_H__
#define __MODULE_TEST_H__


#define GET_MACRO(_1,_2,_3,NAME,...) NAME

#if defined(FILE_TEST)

#define TEST_FUNCTION_MAGIC_NUMBER 0xFDFDAAAA

#define DEF_TEST_FUNCTION(FUNCTION_NAME, FUNCTION_RET_TYPE_DEF, FUNCTION_INPUT_ARGS_DEF, FUNCTION_CONTENT)\
    FUNCTION_RET_TYPE_DEF FUNCTION_NAME_##TEST_FUNCTION_MAGIC_NUMBER FUNCTION_INPUT_ARGS_DEF {\
        FUNCTION_CONTENT\
    }

#define CALL_TEST_FUNCTION(FUNTION_NAME, FUNCTION_INPUT_ARGS) do{ FUNCTION_NAME_##TEST_FUNCTION_MAGIC_NUMBER(FUNCTION_INPUT_ARGS) }while(0);


#if defined(__cplusplus)
#define LOG_TEST(X) do{ std::cout << "debug " << __FILE__ << ":" << __LINE__ << ":" << X << std::endl; }while(0);
#else
#define LOG_TEST(X) do{ printf("debug %s:%d: %s\n", __FILE__, __LINE__, X); }while(0);
#endif

#define ANOTATION_LOGIC_1(SITE)                   ANOTATION_LOGIC_IMPL(SITE, "", "")
#define ANOTATION_LOGIC_2(SITE, NAME)             ANOTATION_LOGIC_IMPL(SITE, NAME, "")
#define ANOTATION_LOGIC_3(SITE, NAME, CONTENT)    ANOTATION_LOGIC_IMPL(SITE, NAME, CONTENT)

#define ANOTATION_LOGIC(...) GET_MACRO(__VA_ARGS__, ANOTATION_LOGIC_3, ANOTATION_LOGIC_2, ANOTATION_LOGIC_1)(__VA_ARGS__)
#define ANOTATION_LOGIC_IMPL(SITE, NAME, CONTENT) \
    do{ \
        printf("debug %s:%d: %s: %s: %s\n", __FILE__, __LINE__, SITE, NAME, CONTENT); \
    }while(0);


#else

#define DEF_TEST_FUNCTION(FUNCTION_NAME, FUNCTION_RET_TYPE_DEF, FUNCTION_INPUT_ARGS_DEF, FUNCTION_CONTENT) 
#define CALL_TEST_FUNCTION(FUNTION_NAME, FUNCTION_INPUT_ARGS) do{ }while(0);

#define LOG_TEST(X) do{ }while(0);

#define ANOTATION_LOGIC_1(SITE)                   ANOTATION_LOGIC_IMPL(SITE, "", "")
#define ANOTATION_LOGIC_2(SITE, NAME)             ANOTATION_LOGIC_IMPL(SITE, NAME, "")
#define ANOTATION_LOGIC_3(SITE, NAME, CONTENT)    ANOTATION_LOGIC_IMPL(SITE, NAME, CONTENT)

#define ANOTATION_LOGIC(...) GET_MACRO(__VA_ARGS__, ANOTATION_LOGIC_3, ANOTATION_LOGIC_2, ANOTATION_LOGIC_1)(__VA_ARGS__)
#define ANOTATION_LOGIC_IMPL(SITE, NAME, CONTENT)

#endif





#endif